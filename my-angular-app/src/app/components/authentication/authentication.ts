import { Component, inject, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router, RouterLink } from '@angular/router';
import { FormsModule, NgForm } from '@angular/forms';
import { SupabaseAuthService } from '../../core/auth/supabase-auth.service';
import { AuthStateService } from '../../core/auth/auth-state.service';
import { filter, take } from 'rxjs/operators';

@Component({
  selector: 'app-authentication',
  standalone: true,
  imports: [CommonModule, RouterLink, FormsModule],
  templateUrl: './authentication.html',
  styleUrl: './authentication.scss',
})
export class AuthenticationComponent implements OnInit {
  protected showPassword = false;
  protected passwordMismatch = false;
  protected serverError = '';
  protected serverSuccess = '';
  protected isBusy = false;
  protected canResend = false;
  protected lastTriedEmail = '';

  protected readonly namePattern =
    "^(?=(?:.*[A-Za-z–ê-–Ø–∞-—è“ê“ë–Ñ—î–Ü—ñ–á—ó]){3,})[A-Z–ê-–Ø“ê–Ñ–Ü–á][A-Za-z–ê-–Ø–∞-—è“ê“ë–Ñ—î–Ü—ñ–á—ó\\s'-]*$";

  protected get isRegister(): boolean {
    return this.router.url.startsWith('/register');
  }

  togglePasswordVisibility(): void {
    this.showPassword = !this.showPassword;
  }
  async resend(email: string) {
    this.serverError = '';
    this.serverSuccess = '';
    if (!email) return;
    try {
      await this.auth.resendConfirmation(email.toLowerCase().trim());
      this.serverSuccess = 'Confirmation email sent again. Please check your inbox.';
      this.canResend = false; // —Å—Ö–æ–≤–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
    } catch (e: any) {
      this.serverError = e?.message ?? 'Failed to resend confirmation.';
      // –∫–Ω–æ–ø–∫–∞ –º–æ–∂–µ –∑–∞–ª–∏—à–∞—Ç–∏—Å—è –≤–∏–¥–∏–º–æ—é –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏
    }
  }
clearMessages(): void {
  this.serverError = '';
  this.serverSuccess = '';
  // —è–∫—â–æ —é–∑–µ—Ä —Ä–µ–¥–∞–≥—É—î email ‚Äî —Ö–æ–≤–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
  this.canResend = false;
}

  async submit(form: NgForm): Promise<void> {
    this.serverError = '';
    this.serverSuccess = '';

    const passwordControl = form.controls['password'];
    const confirmControl = form.controls['confirmPassword'];
    const pwd = passwordControl?.value ?? '';
    const confirm = confirmControl?.value ?? '';

    // üîπ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–±—ñ–≥ –ø–∞—Ä–æ–ª—ñ–≤
    this.passwordMismatch =
      this.isRegister &&
      !!passwordControl &&
      !!confirmControl &&
      passwordControl.valid &&
      confirmControl.valid &&
      pwd !== confirm;

    if (this.passwordMismatch) {
      form.form.markAllAsTouched();
      return;
    }

    if (!form.valid) {
      form.form.markAllAsTouched();
      return;
    }

    const email = form.controls['email']?.value?.trim()?.toLowerCase();
    const password = form.controls['password']?.value;
    const firstName = this.isRegister ? form.controls['firstName']?.value?.trim() : undefined;
    const lastName = this.isRegister ? form.controls['lastName']?.value?.trim() : undefined;

    this.isBusy = true;

    try {
      if (this.isRegister) {
        const res = await this.auth.signUp({ email, password, firstName, lastName });

        // üõ°Ô∏è –í–ê–†–Ü–ê–ù–¢ 1: GoTrue-–ø—ñ–¥–ø–∏—Å–∫–∞ –≤–∂–µ —ñ—Å–Ω—É—î -> identities –ø–æ—Ä–æ–∂–Ω—ñ
        // –¶–µ –Ω–∞–¥—ñ–π–Ω–∏–π –¥–µ—Ç–µ–∫—Ç–æ—Ä "email —É–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π", –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ error –Ω–µ –ø—Ä–∏–π—à–æ–≤
        const alreadyExists =
          !!res.user &&
          Array.isArray((res.user as any).identities) &&
          (res.user as any).identities.length === 0;

        if (alreadyExists) {
          this.serverError = 'This email is already registered. Try logging in instead.';
          this.canResend = true;
          this.lastTriedEmail = email || '';
          return;
        }

        // üì® –Ø–∫—â–æ –∞–∫–∞—É–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ, –∞–ª–µ —Å–µ—Å—ñ—ó —â–µ –Ω–µ–º–∞—î ‚Äî –æ—á—ñ–∫—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è email
        if (!res.session) {
          this.serverSuccess = 'Check your inbox to confirm your email.';
          this.canResend = true; // ‚Üê –¥–∞—Ç–∏ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —â–µ —Ä–∞–∑
          this.lastTriedEmail = email || '';
        } else {
          // ‚úÖ –Ø–∫—â–æ email –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –æ–¥—Ä–∞–∑—É (—Ä—ñ–¥–∫–æ, –∞–ª–µ –º–æ–∂–ª–∏–≤–æ)
          this.serverSuccess = 'Account created. Redirecting...';
          await new Promise((r) => setTimeout(r, 600));
          this.router.navigateByUrl('/dashboard');
        }
      } else {
        // üîπ –õ–æ–≥—ñ–Ω
        await this.auth.signIn(email, password);
        this.serverSuccess = 'Logged in. Redirecting...';
        await new Promise((r) => setTimeout(r, 400));
        this.router.navigateByUrl('/dashboard');
      }
    } catch (e: any) {
  const msg = (e?.message ?? 'Unexpected error').toString();

  if (/Email not confirmed/i.test(msg)) {
    this.serverError = 'Please confirm your email before logging in.';
    this.canResend = true;
    this.lastTriedEmail = form.controls['email']?.value?.trim()?.toLowerCase() || '';
  } else if (/Invalid login credentials/i.test(msg)) {
    this.serverError = 'Invalid email or password.';
    this.canResend = false;
  } else if (/already registered/i.test(msg) || /User already registered/i.test(msg)) {
    this.serverError = 'This email is already registered. Try logging in instead.';
    this.canResend = true;
    this.lastTriedEmail = form.controls['email']?.value?.trim()?.toLowerCase() || '';
  } else if (/rate limit/i.test(msg)) {
    this.serverError = 'Too many attempts. Please try again later.';
    this.canResend = false;
  } else if (/invalid email/i.test(msg)) {
    this.serverError = 'Please enter a valid email address.';
    this.canResend = false;
  } else {
    this.serverError = msg;
    this.canResend = false;
  }
}
 finally {
      this.isBusy = false;
    }
  }

  private readonly router = inject(Router);
  private readonly auth = inject(SupabaseAuthService);
  private authState = inject(AuthStateService);

  ngOnInit(): void {
    // –ö–æ–ª–∏ —Å—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤—Å—è ‚Äì —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–∏–π, –∫–∏–¥–∞—î–º–æ –Ω–∞ /dashboard
    this.authState.state$
      .pipe(
        filter((s) => !s.loading),
        take(1)
      )
      .subscribe((s) => {
        if (s.isAuthenticated) {
          this.router.navigateByUrl('/dashboard');
        }
      });
  }
}
